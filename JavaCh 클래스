[객체(object)]
1. 물리적으로 존재 or 개념적인것 중 다른것과 식별 가능한 것
2. 속성&동작 으로 구성, 속성 - 필드 동작 - 메소드

[객체 지향 프로그래밍]
1. 객체 먼저 생성, 객체들을 하나씩 조립해서 완성된 프로그램 만드는 기법

[객체의 상호작용]
1. 다른 객체와 서로 상호작용해서 동작
2. 다른 객체 기능 이용할 때, 이 메소드를 호출해 데이터를 주고 받음
3. 매개값 : 전달하고자 하는 데이터, 메소드 이름과 ()안에 기술
4. 리턴값 : 메소드의 실행 결과, 호출한 곳으로 돌려주는 값

[객체 간의 관계]
1. 집합 관계 : 완성품과 부품의 관계
2. 사용 관계 : 다른 객체의 필드를 읽고 변경, 메소드 호출 하는 관계
3. 상속 관계 : 부모와 자식 관계, 메소드 물려받음

[클래스 & 인스턴스]
1. 객체 생성하려면 설계도 해당 클래스 필요
2. 클래스로 부터 생성된 객체 - 인스턴스
3. 객체를 만드는 과정 - 인스턴스화
4. 동일한 클래스로 부터 여러개 인스턴스 제작 가능

[클래스 선언]
1. 객체 생성 - 가져야할 데이터(필드), 동작(메소드) 무엇인지 정의
2. 클래스 선언 - 소스 파일명과 동일
3. 클래스명 - 첫문자 : 대문자 첫문자 숫자 X, $,_ 포함 X
4. 공개 클래스 : 어느 위치에 있던지 패키지 상관없이 사용 가능한 클래스

[클래스 변수]
1. 객체 생성시 객체 생성 연산자인 new 필요
2. new연산자 - 객체 생성 후 객체 주소 리턴
3. 라이브러리 클래스 - 실행할 수 있는 타 클래스에서 이용하는 클래스
4. 실행 클래스 - main() 을 가진 실행 가능한 class

[생성자, 필드, 메소드]
1. 필드 ; 객체 데이터 저장하는 역할, 선언 형태는 변수 선언과 비슷, 쓰임새 다름
2. 생성자 : new 연산자로 객체를 생성할 때 객체의 초기화 역할, 선언 형태는 메소드와 비슷, 리턴 타입 X, 이름 - 클래스명과 동일
3. 메소드 : 수행할 동작, 함수

[필드 선언]
1. 블록에서 선언되야함
