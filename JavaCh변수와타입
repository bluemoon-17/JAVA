[변수 선언]
1. 변수 선언
- 1. 데이터 타입 2. 변수 이름 
    --을 결정하는 것
--> 변수에 최초로 값이 도입 될 때 메모리에 할당 후 메모리에 값 저장

2. 변수 선언
- 값 저장 -- 대입연산자(=) 사용
ex) int = 3;

3. 변수 초기화
- 변수의 최초로 값을 도입하는 행위
  --> 이 때 도입된 값 = 초기값

*변수는 또 다른 변수에 대입되어 메모리 간의 값 복사 가능

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
[정수 타입]
정수 - byte, char, short, int, long
실수 - float, double
논리(true/false) - boolean

<정수>  메모리 크기         저장되는 값의 허용범위
byte    1byte / 8bit       -128 ~ 128
short   2byte / 16bit      -32,768 ~ 32768
char    2byte / 16bit       0 ~ 65535(유니코드)
int     4byte / 32bit       -2,147,438,648 ~ 2,147,438,647
long    8byte / 64bit       -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807

* bit - 메모리 사용 크기 단위

<리터럴>
- 코드에서 프로그래머가 직접 입력한 값

2진수 - 0b, 0B로 시작, 숫자 0과1 로 작성
8진수 - 0으로 시작하고 0~7숫자 작성
10진수 - 소수점 없는 0~9로 작성
16진수 - 0x, 0X로 시작, 0~9, A~F or a~f로 작성

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[문자 타입]
- 문자, 정수(유니코드 사용) 타입
  ex) '가' , ('없이) 17

*초기화 목적으로 대입 없이 ''(연달아 붙임) 대입 -> 컴파일 ERROR
 - 반드시 ' ' 공백 포함

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[실수 타입]
실수 - float, double

<실수>      메모리 크기                   유효소수 이하 자리
float       4byte / 32bit                 7자리
duble       8byte / 64bit                 15자리

*double 타입 > float 타입
1. 더 큰 실수 저장 가능
2. 정밀도 높음(지수bit, 기수bit d > f)
*float 지수bit(8bit) 기수bit(23bit)
*double 지수bit(11bit) 기수bit(52bit)

-float 타입에 대입하고 싶을 때
 --컴파일러는 기본 적으로 double타입으로 해석 -> double타입 변수에 저장
 --float에 대입하려면 리터럴 뒤에 f나 F 붙이기

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[논리 타입]
- true or false
--> boolean타입 변수에 대입

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[문자열 타입]
-""(큰 따옴표)로 감싼 문자들
ex) "강수경" -> 유니코드 변환 X

\가 붙은 문자 = 이스케이프 문자
\" - "문자 포함
\' - '문자 포함
\\ - \문자 포함 
\u16진수 - 16진수 코드에 해당하는 문자포함
\t - 출력 시 탭만큼 띄움
\n - 출력 시 줄바꿈(라인피드)
\r - 출력 시 캐리지 리턴

*""" 큰따옴표 3개로 감싸면 이스케이프나 라인피드 할 필요 없이 작성된 그대로 문자열로 저장

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[자동 타입 변환]
-- 값의 허용 범위 <작은 타입 -> 큰 타입> 으로 대입

허용 범위 순
byte < short, char < int < long < float < double

-- 정수 --> 실수 로 대입할 경우, 자동 타입 변환
-- char -> int 자동 변환 => 유니코드 대입

**byte -> char 자동 변환 X
-- char 허용 범위 음수 포함 X BUT byte 허용 범위 음수 포함

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[강제 타입 변환]
-- 큰 허용 범위 -> 작은 허용 범위 변환 X
--> 작은 단위로 쪼개서만 가능

강제 타입 변환(casting)
-- 작은 허용 범위 타입 = (작은 허용 범위 타입{쪼개는 단위}) 큰 허용 범위 타입

1. int -> byte
-(byte) 캐스팅 해서 byte로 강제 변환
byte로 변환시 -128 ~ 127인 int 값만 원래 값 보존

2. long -> int
-(int) 캐스팅으로 강제 변환

3. int - char
-(char) 케스팅으로 강제 변환
char 타입의 허용범위 0~65535사이의 값만 원래 값 유지

4. 실수 -> 정수
-대상 정수 타입으로 캐스팅 해서 강제 변환
*소수점 이하 부분(버려짐) 정수 부분만 저장!

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[연산식에서 자동 타입 변환]

정수 리터럴 피연산자 사용시 컴파일 단계서 연산

*변수 피연산자 사용시 실행할 때 연산 수행
-- 정수 타입 변수 피연산자 사용시 byte, short는 int로 자동 변환 되어 실행

int 보다 허용범위 큰 long타입 피연산자 사용시
long으로 변환되어 연산 수행
=> 연산 결과는 long 타입에 저장

피연산자가 동일한 실수 타입인 경우
-> 해당 타입으로 연산

but 피연산자 중 하나가 double이면 타 피연산자도 double 타입으로 변환
-> 연산 결과도 double로 저장

int, double 연산시
-> int가 double로 자동 변환되어 연산 수행
*int로 연산 해야 한다면 double을 int로 강제 변환 후 덧셈 연산 수행

{+연산자}의 기능
1. 피연산자가 모두 숫자일 경우에는 덧셈 연산을 수행
2. 피연산자 중 하나가 문자열일 경우 나머지도 문자열로 자동 변환되어 문자열 결합 연산 수행

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[문자열을 기본 타입으로 변환]

- String.valueOf()메소드 사용

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[변수 사용 범위]
-- 조건문 if, 반복문 for,while 등 {}블록 가짐
-> 중괄호 블록 내에서 선언된 변수는 해당 중괄호 블록 내에서만 사용 가능

1. 메소드 블록 전체에 이용하고 싶은 경우
-> 메소드 블록 첫머리에 선언

2. 특정 블록 내부에서만 사용하고 싶은 경우
-> 해당 블록 내에서만 선언

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[콘솔로 변수 값 출력]
(리터럴) = 그대로 출력
(변수) = 변수에 저장 된 값 출력

println(내용); - 괄호 안의 내용을 출력하고 행을 바꿔라
print(내용); - 괄호 안의 내용을 출력하고 행은 바꾸지 마라
printf(내용); - 형식 문자열에 맞추어 뒤의 값을 출력해라

1. % - 형식 문자열의 시작
2. conversion - 제공되는 값의 타입에 따라 d(정수), f(실수), s(문자열) 이 온다.

정수
%d - 정수
%6d - 6자리 정수, 왼쪽 빈자리 공백
%-6d - 6자리 정수, 오른쪽 빈자리 공백
%06d - 6자리 정수, 왼쪽 빈자리 0채움

실수
%10.2f - 정수 7자리 + 소수점 2자리, 좌측 빈자리 공백
%-10.2f - 정수 7자리 + 소수점 2자리, 우측 빈자리 공백
%010.2f - 정수 7자리 + 소수점 2자리, 좌측 빈자리 0채움

문자열
%s - 문자열
%6s - 6자리 문자열, 좌측 빈자리 공백
%-6s - 6자리 문자열, 우칙 빈자리 공백

특수문자
\t - 탭
\n - 줄바꿈
%% - %

------------------------------------------------------------------------------------------------------------------------------------------------------------------
[키보드 입력 데이터를 변수에 저장]

1. Scanner사용
Scanner scanner = new Scanner(System.in);
scaaner 변수 선언   Scanner 객체 생성

scanner.nextLine() 실행 -> 키보드 입력 내용 문자열로 읽고 좌측 String 변수에 저장

기본 타입이 동일한지 비교시

1.(byte, short......)의 경우 , == 사용
2. String의 경우, equals() 사용
